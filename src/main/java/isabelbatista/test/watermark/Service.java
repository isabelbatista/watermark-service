package isabelbatista.test.watermark;

import isabelbatista.test.watermark.documents.Publication;
import isabelbatista.test.watermark.documents.PublicationNotFoundException;
import isabelbatista.test.watermark.watermarking.Ticket;
import isabelbatista.test.watermark.watermarking.TicketNotFoundException;

/**
 * Service interface providing necessary methods to stark watermarking, saving books, journals and tickets,
 * get back status information etc.
 *
 * Created by Isabel Batista on 11.05.17.
 */
public interface Service {

    /**
     * Starts the watermark process for the publication (book or journal) with the given ID and returns a @see Ticket.
     * With the @see Ticket ID the watermarking process status and (later) the watermarked publication can be requested.
     *
     * @param publicationId                 ID of the publication.
     * @return                              Ticket that was created/stored for later polling on watermarking status and
     *                                      getting the watermarked publication.
     * @throws PublicationNotFoundException Exception if the publication with the given ID was not found.
     */
    Ticket watermarkPublication(final String publicationId) throws PublicationNotFoundException;

    /**
     * Get a publication (book, journal) by its ticket ID.
     *
     * @param ticketId                      Ticket ID that was given by starting the watermark process.
     * @return                              Publication (book or journal) related to the ticket ID.
     * @throws PublicationNotFoundException Exception if the publication related to the ticket was not found.
     */
    Publication getPublicationByTicketId(final String ticketId) throws PublicationNotFoundException;

    /**
     * Get the status of an existing ticket given by its ID.
     *
     * @param ticketId                  Ticket ID that was given by starting the watermark process.
     * @return                          Status of the ticket to watermark the related publication.
     * @throws TicketNotFoundException  Exception if the ticket with given ID does not exist.
     */
    String getTicketStatus(final String ticketId) throws TicketNotFoundException;

    /**
     * Set the ticket Status. Valid status types @see Status.
     * @param ticket    Ticket that will be updated with the new status.
     * @param status    New status that will be set for the given ticket.
     * @return          Updated ticket as it was persisted.
     */
    Ticket setTicketStatus(Ticket ticket, final String status);

    /**
     * Get the publication (book or journal) by the given publication ID.
     *
     * @param publicationId     Publication ID that was generated by persisting the publication.
     * @return                  Publication (book or journal) that was persisted.
     */
    Publication getPublicationById(final String publicationId);
}
